//路径总和III
//二叉树的每个节点都存储一个整数值.
//找出一条路径和等于给定数值的 路径总数.
//所有路径(子路径)可能性之和. 就是说可以不从root开始 leaf结束 

 	// 就是这个记录值并不一定能够从根开始
    
    //在以root为根的二叉树中，寻求包含root的路径，和为sum
    int dfs(TreeNode* root, int sum){
        if(!root) return 0;
        
        int res = 0;
        if(sum == root->val) res += 1;
        
        res +=  dfs(root->left, sum - root->val); // 分别在左子树和右子树中寻找
        res +=  dfs(root->right, sum - root->val);
        
        return res;
    }

    int pathSum(TreeNode* root, int sum) {
        if(!root) return 0;
        
        int res = 0;
        
        //包含这个元素
        res += dfs(root, sum); //去搜索
        
        res += pathSum(root->left, sum);
        res += pathSum(root->right, sum);
        
        return res;
    }