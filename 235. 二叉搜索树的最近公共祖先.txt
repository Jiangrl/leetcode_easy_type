//二叉搜索树的最近公共祖先
//最近公共祖先: 对于有根树T的两个节点p & q, 其最近公共祖先x满足x 是p & q的祖先且x的深度尽可能的大(一个节点也可以是自己的祖先)

	//
	TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
        if(!root || root == p || root == q){
            return root;
        }
        
        //我们也可以使用二叉搜索树的节点值(right.val <= root.val <= right.val)的特点!
        TreeNode* left = lowestCommonAncestor(root->left, p, q);
        TreeNode* right = lowestCommonAncestor(root->right, p, q);
        
        if(left != NULL && right != NULL){ //分别位于左右子树中
            return root;
        }
        
        return left == NULL ? right : left; // 若不是根节点 就判断是否是在左右子树中
    }


    //利用二叉树节点值之间的关系进行比较 然后判断
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
           
        if((root->val - p->val) * (root->val - q->val) <= 0){
            return root; //分别在左右子树
        }
        else if(root->val > p->val && root->val > q->val){
            return lowestCommonAncestor(root->left, p, q);
        }
        else  return lowestCommonAncestor(root->right, p, q);
    }