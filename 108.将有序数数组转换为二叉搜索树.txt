//将有序数数组转换为二叉搜索树
//将一个升序排列的有序数组 转换为一棵平衡二叉搜索树

//注意是平衡二叉树 - 左右子树的高度差为1

	TreeNode* buildTree(vector<int>& nums, int left, int right){
        if(left > right){
           return NULL; 
        }
        
        int mid = (left + right) / 2; //存在偶数个数
        
        TreeNode* root = new TreeNode(nums[mid]);
        root->left = buildTree(nums, left, mid - 1);
        root->right = buildTree(nums, mid + 1, right);
        
        return root;
    }
    
    // 因为这个数组的是有序的, 所以可以不断 二分 [l - mid - 1 (left)| mid(root) | mid + 1 - r (right)]!
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return nums.size() == 0 ? NULL : buildTree(nums, 0, nums.size() - 1);
    }
