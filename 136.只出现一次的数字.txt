//只出现一次的数字
//给定一个非空的整数数组, 除了某个元素只出现一次 其余元素均出现两次 找出并返回那个只出现一次的数字
	

	//这里我借助了第三方的辅助数据结构, map<key,value> 进行映射
	int singleNumber(vector<int>& nums) {
        int sum = 0;
        map<int, int> mp;
        for(int i = 0; i < nums.size(); i ++){
            if(mp[nums[i]] > 0){
                sum -= nums[i];
            }
            else  sum += nums[i];
            
            mp[nums[i]] ++;
        }
        return sum;
    }

    //但上述这种方法空间复杂度较高
    //我们可以借助于位运算中的 ^(异或运算符)
    //特征 2 & 2 : 10 ^ 10 = 00 
    // 2 ^ 0 : 10 ^ 00 = 10(2)
    //借助此计算特征 我们可以所有元素的遍历一次 然后返回最后的结果
    int res = 0;
    for(int i = 0; i < nums.size(); i ++){
        res ^= nums[i];
    }
        